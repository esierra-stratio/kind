---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: "{{ .Descriptor.ClusterID }}"
  namespace: "cluster-{{ .Descriptor.ClusterID }}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks: [\"{{- if .Descriptor.Networks.PodsCidrBlock -}} {{ .Descriptor.Networks.PodsCidrBlock }} {{- else -}} 192.168.0.0/16 {{- end }}\"]
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: GCPCluster
    name: "{{ .Descriptor.ClusterID }}"
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    name: "{{ .Descriptor.ClusterID }}-control-plane"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: GCPCluster
metadata:
  name: "{{ .Descriptor.ClusterID }}"
  namespace: "cluster-{{ .Descriptor.ClusterID }}"
spec:
  project: {{ .Credentials.ProjectID }}
  region: "{{ .Descriptor.Region }}"
  {{- if ne .Descriptor.Networks.VPCID "" }}
  network:
    name: {{ .Descriptor.Networks.VPCID }}
    {{- if gt (len .Descriptor.Networks.Subnets) 0 }}
    autoCreateSubnetworks: false
    subnets:
    {{- with (index .Descriptor.Networks.Subnets 0) }}
    - name: {{ .SubnetId }}
      region: "{{ $.Descriptor.Region }}"
    {{- end }}
  {{- end }}
  {{- else }}
  network:
    name: default
  {{- end }}
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
metadata:
  name: "{{ .Descriptor.ClusterID }}-control-plane"
  namespace: "cluster-{{ .Descriptor.ClusterID }}"
spec:
  replicas: {{- if .Descriptor.ControlPlane.HighlyAvailable }} 3 {{- else }} 1 {{- end }}
  machineTemplate:
    metadata:
      labels:
        keos.stratio.com/machine-role: "{{ .Descriptor.ClusterID }}-control-plane-node"
    infrastructureRef:
      kind: GCPMachineTemplate
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      name: "{{ .Descriptor.ClusterID }}-control-plane"
  kubeadmConfigSpec:
    initConfiguration:
      nodeRegistration:
        name: {{`'{{ ds.meta_data.local_hostname.split(\".\")[0] }}'`}}
        kubeletExtraArgs:
          cloud-provider: gce
    clusterConfiguration:
      apiServer:
        timeoutForControlPlane: 20m
        extraArgs:
          cloud-provider: gce
      controllerManager:
        extraArgs:
          cloud-provider: gce
          allocate-node-cidrs: \"false\"
          cloud-config: /etc/kubernetes/gce.conf
        extraVolumes:
          - hostPath: /etc/kubernetes/gce.conf
            mountPath: /etc/kubernetes/gce.conf
            name: gce-conf
            pathType: FileOrCreate
    files:
      - content: |
          [Global]
          multizone=true
        path: /etc/kubernetes/gce.conf
    {{- if gt (len .DockerRegistries) 0 }}
      - content: |
          version = 2
          imports = [\"/etc/containerd/conf.d/*.toml\"]
          [plugins]
            [plugins.\"io.containerd.grpc.v1.cri\"]
              sandbox_image = \"k8s.gcr.io/pause:3.9\"
            [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]
              runtime_type = \"io.containerd.runc.v2\"
              [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]
                SystemdCgroup = true
            [plugins.\"io.containerd.grpc.v1.cri\".registry]
              [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]
                [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]
                  endpoint = [\"https://registry-1.docker.io\"]
                {{- range $reg := .DockerRegistries }}
                {{- $url := hostname $reg.url }}
                [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"{{ $url }}\"]
                  endpoint = [\"https://{{ $url }}\"]
                {{- end }}
            [plugins.\"io.containerd.grpc.v1.cri\".registry.configs]
              {{- range $reg := .DockerRegistries }}
              {{- $url := hostname $reg.url }}
              [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"{{ $url }}\".auth]
                password = \"{{ $reg.pass }}\"
                username = \"{{ $reg.user }}\"
              {{- end }}
        path: /etc/containerd/config.toml
    postKubeadmCommands:
      - systemctl restart containerd
    {{- end }}
    {{- if .Descriptor.ControlPlane.ExtraVolumes }}
    diskSetup:
      filesystems:
        {{- range $index, $vol := .Descriptor.ControlPlane.ExtraVolumes }}
        - device: /dev/disk/by-id/google-persistent-disk-{{ len (printf "a%*s" $index "") }}
          filesystem: ext4
          label: {{ $vol.Label }}
        {{- end }}
      partitions:
        {{- range $index, $vol := .Descriptor.ControlPlane.ExtraVolumes }}
        - device: /dev/disk/by-id/google-persistent-disk-{{ len (printf "a%*s" $index "") }}
          layout: true
          overwrite: false
          tableType: gpt
        {{- end }}
    mounts:
      {{- range $index, $vol := .Descriptor.ControlPlane.ExtraVolumes }}
      - - LABEL={{ $vol.Label }}
        - {{ $vol.MountPath }}
      {{- end }}
    {{- end }}
    joinConfiguration:
      nodeRegistration:
        name: {{`'{{ ds.meta_data.local_hostname.split(\".\")[0] }}'`}}
        kubeletExtraArgs:
          cloud-provider: gce
  version: "{{ .Descriptor.K8SVersion }}"
---
kind: GCPMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
metadata:
  name: "{{ .Descriptor.ClusterID }}-control-plane"
  namespace: "cluster-{{ .Descriptor.ClusterID }}"
spec:
  template:
    spec:
      instanceType: "{{ .Descriptor.ControlPlane.Size }}"
      image: "{{ .Descriptor.ControlPlane.NodeImage }}"
      {{- if .Descriptor.ControlPlane.RootVolume.Size }}
      rootDeviceSize: {{ .Descriptor.ControlPlane.RootVolume.Size }}
      {{- end }}
      {{- if .Descriptor.ControlPlane.RootVolume.Type }}
      rootDeviceType: {{ .Descriptor.ControlPlane.RootVolume.Type }}
      {{- end }}
      {{- if ne .Descriptor.Networks.Subnets nil }}
      subnet: {{ with (index .Descriptor.Networks.Subnets 0) }}{{ .SubnetId }}{{ end }}
      {{- end }}
      {{- if .Descriptor.ControlPlane.ExtraVolumes }}
      additionalDisks:
        {{- range $index, $vol := .Descriptor.ControlPlane.ExtraVolumes }}
        - deviceType: {{ $vol.Type }}
          size: {{ $vol.Size }}
        {{- end }}
      {{- end }}
{{- range $node := .Descriptor.WorkerNodes }}
{{- range $index, $n := loop .AZ .ZoneDistribution .Quantity .NodeGroupMaxSize .NodeGroupMinSize }}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
{{- if gt $node.NodeGroupMaxSize 0 }}
  annotations:
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-max-size: '{{ $n.MaxSize }}'
    cluster.x-k8s.io/cluster-api-autoscaler-node-group-min-size: '{{ $n.MinSize }}'
{{- end }}
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.Descriptor.ClusterID }}"
spec:
  clusterName: "{{ $.Descriptor.ClusterID }}"
  replicas: {{ $n.QA }}
  selector:
    matchLabels:
  template:
    metadata:
      labels:
        keos.stratio.com/machine-role: "{{ $.Descriptor.ClusterID }}-worker-node"
    spec:
      clusterName: "{{ $.Descriptor.ClusterID }}"
      version: "{{ $.Descriptor.K8SVersion }}"
      failureDomain: "{{ $n.AZ }}"
      bootstrap:
        configRef:
          name: "{{ $node.Name }}-md-{{ $index }}"
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: "{{ $node.Name }}-md-{{ $index }}"
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: GCPMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: GCPMachineTemplate
metadata:
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.Descriptor.ClusterID }}"
spec:
  template:
    spec:
      additionalNetworkTags: ["{{ $node.Name }}-md-{{ $index }}"]
      instanceType: "{{ $node.Size }}"
      image: "{{ $node.NodeImage }}"
      {{- if $node.RootVolume.Size }}
      rootDeviceSize: {{ $node.RootVolume.Size }}
      {{- end }}
      {{- if $node.RootVolume.Type }}
      rootDeviceType: {{ $node.RootVolume.Type }}
      {{- end }}
      {{- if ne $.Descriptor.Networks.Subnets nil }}
      subnet: {{ with (index $.Descriptor.Networks.Subnets 0) }}{{ .SubnetId }}{{ end }}
      {{- end }}
      {{- if $node.ExtraVolumes }}
      additionalDisks:
        {{- range $index, $vol := $node.ExtraVolumes }}
        - deviceType: {{ $vol.Type }}
          size: {{ $vol.Size }}
        {{- end }}
      {{- end }}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: "{{ $node.Name }}-md-{{ $index }}"
  namespace: "cluster-{{ $.Descriptor.ClusterID }}"
spec:
  template:
    spec:
      {{- if gt (len $.DockerRegistries) 0 }}
      files:
        - content: |
            version = 2
            imports = [\"/etc/containerd/conf.d/*.toml\"]
            [plugins]
              [plugins.\"io.containerd.grpc.v1.cri\"]
                sandbox_image = \"k8s.gcr.io/pause:3.9\"
              [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]
                runtime_type = \"io.containerd.runc.v2\"
                [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]
                  SystemdCgroup = true
              [plugins.\"io.containerd.grpc.v1.cri\".registry]
                [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]
                  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]
                    endpoint = [\"https://registry-1.docker.io\"]
                  {{- range $reg := $.DockerRegistries }}
                  {{- $url := hostname $reg.url }}
                  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"{{ $url }}\"]
                    endpoint = [\"https://{{ $url }}\"]
                  {{- end }}
              [plugins.\"io.containerd.grpc.v1.cri\".registry.configs]
                {{- range $reg := $.DockerRegistries }}
                {{- $url := hostname $reg.url }}
                [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"{{ $url }}\".auth]
                  password = \"{{ $reg.pass }}\"
                  username = \"{{ $reg.user }}\"
                {{- end }}
          path: /etc/containerd/config.toml
      postKubeadmCommands:
        - systemctl restart containerd
      {{- end }}
      {{- if $node.ExtraVolumes }}
      diskSetup:
        filesystems:
          {{- range $index, $vol := $node.ExtraVolumes }}
          - device: /dev/disk/by-id/google-persistent-disk-{{ len (printf "a%*s" $index "") }}
            filesystem: ext4
            label: {{ $vol.Label }}
          {{- end }}
        partitions:
          {{- range $index, $vol := $node.ExtraVolumes }}
          - device: /dev/disk/by-id/google-persistent-disk-{{ len (printf "a%*s" $index "") }}
            layout: true
            overwrite: false
            tableType: gpt
          {{- end }}
      mounts:
        {{- range $index, $vol := $node.ExtraVolumes }}
        - - LABEL={{ $vol.Label }}
          - {{ $vol.MountPath }}
        {{- end }}
      {{- end }}
      joinConfiguration:
        nodeRegistration:
          name: {{`'{{ ds.meta_data.local_hostname.split(\".\")[0] }}'`}}
          kubeletExtraArgs:
            cloud-provider: gce
            {{- if gt (len $node.Labels) 0 }}
            node-labels: \"{{ range $key, $value := $node.Labels }}{{ $key }}={{ $value }},{{- end }}\"
            {{- end }}
            {{- if gt (len $node.Taints) 0 }}
            register-with-taints: \"{{ range $i, $taint := $node.Taints }}{{$taint}}{{- if ne $i (sub (len $node.Taints) 1) }},{{- end }}{{ end }}\"
            {{- end }}
{{- end }}
{{- end }}
